{"version":3,"sources":["Components/Searchbar/Searchbar.js","Service/ApiService.js","Components/ImageGallery/ImageGallery.js","Components/ImageGalleryItem/ImageGalleryItem.js","Components/Modal/Modal.js","Components/Button/Button.js","Components/ImageList/ImageList.js","App.js","index.js"],"names":["Searchbar","onSubmit","useState","searchQuery","setSearchQuery","className","e","preventDefault","trim","alert","type","value","onChange","target","autoComplete","autoFocus","placeholder","ApiService","BASE_URL","API_KEY","searchImages","url","page","perPage","axios","get","then","response","data","hits","catch","error","console","log","this","_searchQuery","_page","ImageGallery","children","ImageGalleryItem","searchResults","openModal","length","map","id","webformatURL","tags","onClick","src","alt","modalWrapper","document","querySelector","Modal","onCloseModal","useEffect","window","addEventListener","handleKeyDown","removeEventListener","code","createPortal","currentTarget","Button","newApiService","ImageList","setSearchResults","status","setStatus","largeImageId","setLargeImageId","isModalOpen","setIsModalOpen","result","findLargeImg","find","paramLoadMore","color","height","width","Number","prev","scrollTo","top","documentElement","scrollHeight","behavior","largeImageURL","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b5b94811.chunk.js","sourcesContent":["import { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './Searchbar.css'\r\n\r\nfunction Searchbar({ onSubmit }) {\r\n  const [searchQuery, setSearchQuery] = useState('')\r\n\r\n  const handleInputChange = (e) => {\r\n    setSearchQuery(e.target.value)\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n\r\n    if (searchQuery.trim() === '') {\r\n      alert('please type your query')\r\n      return\r\n    }\r\n    onSubmit(searchQuery)\r\n    setSearchQuery('')\r\n  }\r\n\r\n  return (\r\n    <header className='Searchbar'>\r\n      <form className='SearchForm' onSubmit={handleSubmit}>\r\n        <button type='submit' className='SearchForm-button'>\r\n          <span className='SearchForm-button-label'>Search</span>\r\n        </button>\r\n\r\n        <input\r\n          className='SearchForm-input'\r\n          type='text'\r\n          value={searchQuery}\r\n          onChange={handleInputChange}\r\n          autoComplete='off'\r\n          autoFocus\r\n          placeholder='Search images and photos'\r\n        />\r\n      </form>\r\n    </header>\r\n  )\r\n}\r\n\r\nSearchbar.propTypes = {\r\n  onSubmit: PropTypes.func,\r\n}\r\n\r\nexport default Searchbar\r\n","import axios from 'axios'\n\nexport class ApiService {\n  constructor(BASE_URL, API_KEY) {\n    this.BASE_URL = BASE_URL\n    this.API_KEY = API_KEY\n    this._searchQuery = ''\n    this._page = 1\n    this.perPage = 12\n  }\n\n  get searchQuery() {\n    return this._searchQuery\n  }\n\n  set searchQuery(value) {\n    return (this._searchQuery = value)\n  }\n\n  get page() {\n    return this._page\n  }\n\n  set page(value) {\n    return (this._page += value)\n  }\n\n  resetPage() {\n    return (this._page = 1)\n  }\n\n  searchImages = () => {\n    let url = `${this.BASE_URL}?q=${this.searchQuery}&page=${this.page}&key=${this.API_KEY}&image_type=photo&orientation=horizontal&per_page=${this.perPage}`\n    return axios\n      .get(url)\n      .then((response) => response.data.hits)\n      .catch((error) => {\n        console.log(error)\n      })\n  }\n}\n","import './ImageGallery.css'\n\nconst ImageGallery = ({ children }) => {\n  return <ul className='ImageGallery'>{children}</ul>\n}\n\nexport default ImageGallery\n","import PropTypes from 'prop-types'\nimport './ImageGalleryItem.css'\n\nconst ImageGalleryItem = ({ searchResults, openModal }) => {\n  return (\n    <>\n      {searchResults.length > 0 &&\n        searchResults.map(({ id, webformatURL, tags }) => {\n          return (\n            <li\n              key={id}\n              id={id}\n              onClick={openModal}\n              className='ImageGalleryItem'\n            >\n              <img\n                src={webformatURL}\n                alt={tags}\n                className='ImageGalleryItem-image'\n              />\n            </li>\n          )\n        })}\n    </>\n  )\n}\n\nImageGalleryItem.propTypes = {\n  searchResults: PropTypes.array,\n  openModal: PropTypes.func,\n}\n\nexport default ImageGalleryItem\n","import { useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './Modal.css'\r\nimport { createPortal } from 'react-dom'\r\n\r\nconst modalWrapper = document.querySelector('#modal-wrapper')\r\n\r\nfunction Modal({ onCloseModal, src, alt }) {\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', handleKeyDown)\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown)\r\n    }\r\n  })\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.code === 'Escape') {\r\n      onCloseModal()\r\n    }\r\n  }\r\n\r\n  const handleClickBackdrop = (e) => {\r\n    if (e.currentTarget === e.target) {\r\n      onCloseModal()\r\n    }\r\n  }\r\n\r\n  return createPortal(\r\n    <div className='Overlay' onClick={handleClickBackdrop}>\r\n      <div className='Modal'>\r\n        <img src={src} alt={alt} />\r\n      </div>\r\n    </div>,\r\n    modalWrapper\r\n  )\r\n}\r\n\r\nModal.propTypes = {\r\n  onCloseModal: PropTypes.func,\r\n  src: PropTypes.string,\r\n  alt: PropTypes.string,\r\n}\r\n\r\nexport default Modal\r\n","import PropTypes from 'prop-types'\nimport './Button.css'\n\nconst Button = ({ onClick }) => {\n  return (\n    <div className='button-wrapper'>\n      <button type='button' className='Button' onClick={onClick}>\n        Load more\n      </button>\n    </div>\n  )\n}\n\nButton.propTypes = {\n  onClick: PropTypes.func,\n}\n\nexport default Button\n","import { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css'\r\nimport { ApiService } from '../../Service/ApiService'\r\nimport ImageGallery from '../ImageGallery/ImageGallery'\r\nimport ImageGalleryItem from '../ImageGalleryItem/ImageGalleryItem'\r\nimport Modal from '../Modal/Modal'\r\nimport Button from '../Button/Button'\r\nimport Loader from 'react-loader-spinner'\r\nimport './ImageList.css'\r\n\r\nconst BASE_URL = 'https://pixabay.com/api/'\r\nconst API_KEY = '23128758-78bb9bd788fc6e2a491c41576'\r\n\r\nconst newApiService = new ApiService(BASE_URL, API_KEY)\r\n\r\nfunction ImageList({ searchQuery }) {\r\n  const [searchResults, setSearchResults] = useState([])\r\n  const [status, setStatus] = useState('idle')\r\n  const [largeImageId, setLargeImageId] = useState(null)\r\n  const [isModalOpen, setIsModalOpen] = useState(false)\r\n  useEffect(() => {\r\n    if (!searchQuery) {\r\n      return\r\n    }\r\n    setStatus('pending')\r\n    newApiService.searchQuery = searchQuery\r\n    newApiService\r\n      .searchImages()\r\n      .then((result) => {\r\n        setSearchResults(result)\r\n        setStatus('resolved')\r\n      })\r\n      .catch((error) => {\r\n        console.log(error)\r\n        setStatus('rejected')\r\n      })\r\n  }, [searchQuery])\r\n\r\n  const findLargeImg = () => {\r\n    const largeImage = searchResults.find((result) => {\r\n      return result.id === largeImageId\r\n    })\r\n    return largeImage\r\n  }\r\n\r\n  const openModal = (e) => {\r\n    setIsModalOpen(true)\r\n    setLargeImageId(Number(e.currentTarget.id))\r\n  }\r\n\r\n  const closeModal = () => {\r\n    setIsModalOpen(false)\r\n  }\r\n\r\n  const onButtonClick = () => {\r\n    newApiService.page = 1\r\n    newApiService\r\n      .searchImages()\r\n      .then((result) => {\r\n        setSearchResults((prev) => [...prev, ...result])\r\n        setStatus('resolved')\r\n      })\r\n      .then(() => {\r\n        window.scrollTo({\r\n          top: document.documentElement.scrollHeight,\r\n          behavior: 'smooth',\r\n        })\r\n      })\r\n      .catch((error) => {\r\n        console.log(error)\r\n        setStatus('rejected')\r\n      })\r\n  }\r\n\r\n  const paramLoadMore = searchResults.length > 0 && searchResults.length >= 12\r\n\r\n  if (status === 'idle') {\r\n    return (\r\n      <div className='info-messages'>\r\n        <p>\r\n          Hello, I have a lot images for you. Just type your query to search\r\n          form\r\n        </p>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (status === 'pending') {\r\n    return (\r\n      <div className='loader-wrapper'>\r\n        <Loader type='TailSpin' color='#00BFFF' height={120} width={120} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (status === 'rejected') {\r\n    return (\r\n      <div className='info-messages'>\r\n        <p>Error</p>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (status === 'resolved') {\r\n    return (\r\n      <>\r\n        <ImageGallery>\r\n          <ImageGalleryItem\r\n            searchResults={searchResults}\r\n            openModal={openModal}\r\n          />\r\n        </ImageGallery>\r\n\r\n        {paramLoadMore && <Button onClick={onButtonClick} />}\r\n        {searchResults.length === 0 && (\r\n          <div className='info-messages'>\r\n            <p>There are no images for your query</p>\r\n          </div>\r\n        )}\r\n        {isModalOpen && (\r\n          <Modal\r\n            largeImageId={largeImageId}\r\n            onCloseModal={closeModal}\r\n            src={findLargeImg().largeImageURL}\r\n            alt={findLargeImg().tags}\r\n          ></Modal>\r\n        )}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nImageList.propTypes = {\r\n  searchQuery: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default ImageList\r\n","import { useState } from 'react'\r\nimport './App.css'\r\nimport Searchbar from './Components/Searchbar/Searchbar'\r\nimport ImageList from './Components/ImageList/ImageList'\r\n\r\nfunction App() {\r\n  const [searchQuery, setSearchQuery] = useState('')\r\n\r\n  const handleFormSubmit = (searchQuery) => {\r\n    setSearchQuery(searchQuery)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Searchbar onSubmit={handleFormSubmit} />\r\n      <ImageList searchQuery={searchQuery} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}